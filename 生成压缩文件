package com.sbfc.file.zip;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * 文件压缩
 * @author Administrator
 *
 */
public class FileCompress {
	private static final int BUFFER_SIZE = 2 * 1024;
	/**
	 * 压缩成zip文件  方法1
	 * @param srcDir  压缩文件夹路径
	 * @param out     压缩文件输出流
	 * @param keepDirStruc 是否保留
	 * @throws RuntimeException
	 */
	public static void toZip(String srcDir,OutputStream out,boolean keepDirStruc) 
		throws RuntimeException{
		long start = System.currentTimeMillis();
		ZipOutputStream zos = null;
		try {
			zos = new ZipOutputStream(out);
			File sourceFile = new File(srcDir);
			compress(sourceFile,zos,sourceFile.getName(),keepDirStruc);
			long end = System.currentTimeMillis();
			System.out.println("压缩完成，耗时：" + (end - start) + "ms");
		}catch(Exception e) {
			throw new RuntimeException("zip error from FileCompress",e);
		}finally {
			if(zos != null) {
				try {
					zos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	/**
	 * 压缩方法2
	 * @param srcFiles
	 * @param out
	 * @throws RuntimeException
	 */
	public static void  toZip(List<File> srcFiles,OutputStream out) throws RuntimeException{
		long start = System.currentTimeMillis();
		ZipOutputStream zos = null;
		try {
			zos = new ZipOutputStream(out);
			for(File srcFile : srcFiles) {
				byte[] buf = new byte[BUFFER_SIZE];
				zos.putNextEntry(new ZipEntry(srcFile.getName()));
				int len;
				FileInputStream in = new FileInputStream(srcFile);
				while((len = in.read(buf)) != -1) {
					zos.write(buf,0,len);
				}
				zos.closeEntry();
				in.close();
			}
			long end = System.currentTimeMillis();
			System.out.println("压缩完成，耗时：" + (end -start) + "ms");
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if(zos != null) {
				try {
					zos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	/**
	 * 递归压缩方法
	 * @param sourceFile  源文件
	 * @param zos   zip输出流
	 * @param name  压缩后的名称
	 * @param keepDirStruc 
	 * @throws Exception
	 */
	private static void compress(File sourceFile,ZipOutputStream zos,String name
			,boolean keepDirStruc) throws Exception{
		byte[] buf = new byte[BUFFER_SIZE];
		if(sourceFile.isFile()) {
			//向zip输出流中添加一个zip实体，构造器中name为zip实体的文件名称
			zos.putNextEntry(new ZipEntry(name));
			//copy文件到zip输出流中
			int len;
			FileInputStream in = new FileInputStream(sourceFile);
			while((len = in.read(buf)) != -1) {
				zos.write(buf,0,len);
			}
			zos.closeEntry();
			in.close();
		}else {
			File[] listFiles = sourceFile.listFiles();
			if(listFiles == null || listFiles.length == 0) {
				//需要保留原来的文件结构时，需要对空文件夹进行处理
				if(keepDirStruc) {
					//空文件夹的处理
					zos.putNextEntry(new ZipEntry(name + "/"));
					//没有文件，不需要文件的copy
					zos.closeEntry();
				}
			}else {
				for(File file : listFiles) {
					//判断是否需要保留原来的文件结构
					if(keepDirStruc) {
						//注意：file.getName()前面需要带上父文件夹的名字加一斜杠，不然最后压缩中就不能保留原来的
						//文件结构，即：所有文件都跑到压缩包根目录下了
						compress(file,zos,name + "/" + file.getName(),keepDirStruc);
					}else {
						compress(file,zos,file.getName(),keepDirStruc);
					}
				}
			}
		}
	}
	public static void main(String[] args) throws FileNotFoundException {
		//测试方法1
//		FileOutputStream fos = new FileOutputStream(new File("D:/zip/test.zip"));
//		FileCompress.toZip("D:/was", fos,true);
		
		//测试方法2
		List<File> fileList = new ArrayList<File>();
		fileList.add(new File("D:/was/workflow/weikefu.log"));
		fileList.add(new File("D:/was/workflow/logs/other.log"));
		FileOutputStream fos2 = new FileOutputStream(new File("D:/zip/test2.zip"));
		FileCompress.toZip(fileList, fos2);
	}
}
